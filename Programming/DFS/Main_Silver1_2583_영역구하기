import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;

public class Main_Silver1_2583_영역구하기 {
	static int N, M, K, answer, size;
	static boolean[][] map;
	static boolean[][] visited;
	static List<Integer> list;
	static int[][] dir = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());

		map = new boolean[N][M];
		visited = new boolean[N][M];

		list = new ArrayList<>();
		for (int i = 0; i < K; i++) {
			st = new StringTokenizer(br.readLine());
			int buttomX = Integer.parseInt(st.nextToken());
			int buttomY = Integer.parseInt(st.nextToken());
			int topX = Integer.parseInt(st.nextToken());
			int topY = Integer.parseInt(st.nextToken());

			// 색칠되어 있는 부분은 true 처리
			for (int y = buttomY; y < topY; y++) {
				for (int x = buttomX; x < topX; x++) {
					map[y][x] = true;
					visited[y][x] = true;
				}
			}
		}

		answer = 0;

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				// 비어있는 부분 찾기
				if (!visited[i][j]) {
					size = 0;
					answer++;
					dfs(i, j);
					// 비어있는 부분 개수 리스트에 저장
					list.add(size);
				}
			}
		}

		// 비어있는 부분 오름차순 정렬
		Collections.sort(list);

		// 정답 출력
		System.out.println(answer);
		for (Integer x : list) {
			System.out.print(x + " ");
		}
	}

	private static void dfs(int y, int x) {
		visited[y][x] = true;
		size++;

		// 상하좌우 검사
		for (int d = 0; d < 4; d++) {
			int ny = y + dir[d][0];
			int nx = x + dir[d][1];
			if (!boundary(ny, nx)) {
				continue;
			}

			// 방문한 적이 없고 비어있는 부분이면
			if (!visited[ny][nx] && !map[ny][nx]) {
				// 이어서 탐색
				dfs(ny, nx);
			}
		}
	}

	private static boolean boundary(int ny, int nx) {
		return ny >= 0 && ny < N && nx >= 0 && nx < M;
	}
}
