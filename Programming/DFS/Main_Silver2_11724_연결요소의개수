import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main_Silver2_11724_연결요소의개수 {
	static int N, M, answer;
	static boolean map[][];
	static boolean visited[];

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new boolean[N][N]; // 인접행렬 사용
		visited = new boolean[N];
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int y = Integer.parseInt(st.nextToken()) - 1;
			int x = Integer.parseInt(st.nextToken()) - 1;
			map[y][x] = true;
			map[x][y] = true;
		}

		answer = 0;
		for (int i = 0; i < N; i++) {
			// 방문한 적이 없을 때
			if (!visited[i]) {
				// 연결되어 있는 개수 증가
				answer++;
				dfs(i);
			}
		}

		System.out.println(answer);
	}

	private static void dfs(int cur) {
		// 방문 처리 후
		visited[cur] = true;

		// 연결되어 있는 요소는 방문처리
		for (int i = 0; i < N; i++) {
			if (map[cur][i] && !visited[i]) {
				dfs(i);
			}
		}
	}
}
