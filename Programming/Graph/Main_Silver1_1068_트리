import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main {
	static int N, deleteNode, cnt, rootNode;
	static int[] count;
	static boolean[] visited;
	static ArrayList<Integer>[] list;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		// 입력
		N = Integer.parseInt(br.readLine());
		StringTokenizer st = new StringTokenizer(br.readLine()); // -1 0 0 1 1

		list = new ArrayList[N];
		count = new int[N]; // dfs에서 각 정점에 몇 개의 점이 연결됬는지
		visited=  new boolean[N]; // dfs에서 그 정점에 방문했는지
		for (int i = 0; i < N; i++) {
			list[i] = new ArrayList<Integer>();
		}

		for (int i = 0; i < N; i++) {
			int x = Integer.parseInt(st.nextToken());
			if (x == -1) {
				rootNode = i;
			} else {
				list[x].add(i);
				count[x]++; // 각 정점에 몇 개의 점이 연결됬는지
			}
		}
		deleteNode = Integer.parseInt(br.readLine());

		cnt = 0;
		dfs(rootNode);
		System.out.println(cnt);
	}

	private static void dfs(int i) {
		if(i == deleteNode) {
			return;
		}
		
		// 테스트 케이스 -1 0 0 1 2 2을 위함
		// deleteNode때문에 자신이 리프 노드가 된 경우
		if (!visited[i] && count[i] != 0) { // 현재 노드에 값이 있는지 확인
			visited[i] = true;
			for (int s = 0; s < count[i]; s++) {
				dfs(list[i].get(s)); // 자식 노드가 삭제되었을 때
				if(list[i].get(s) == deleteNode && count[i] == 1) { // 자식 노드가 하나인지를 판별
					cnt++;
				}
			}
		}
		
		if (!visited[i] && count[i] == 0) { // 리프 노드
			visited[i] = true;
			cnt++;
		}
		
		return;
	}
}
