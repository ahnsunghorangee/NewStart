import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static int N, M;
	static int distance;
	static boolean[] visited;
	static ArrayList<Node>[] list;
	static PriorityQueue<Node> pq;

	static class Node implements Comparable<Node> {
		int start; // 사실 start는 필요가 없다.
		int end;
		int value;

		public Node(int start, int end, int value) {
			super();
			this.start = start;
			this.end = end;
			this.value = value;
		}

		@Override
		public String toString() {
			return "Node [start=" + start + ", end=" + end + ", value=" + value + "]";
		}

		@Override
		public int compareTo(Node o) {
			return this.value - o.value; // 양 정점에 관계없이 가중치로 오름차순 정렬 -> 어차피 방문처리해서 방문한 정점은 방문 안 해!
		}
	} // end Node

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = null;

		N = Integer.parseInt(br.readLine()); // 컴퓨터 개수
		M = Integer.parseInt(br.readLine()); // 간선 개수

		list = new ArrayList[N];
		for (int i = 0; i < N; i++) {
			list[i] = new ArrayList<Node>();
		}

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken()) - 1;
			int end = Integer.parseInt(st.nextToken()) - 1;
			int value = Integer.parseInt(st.nextToken());

			list[start].add(new Node(start, end, value));
			list[end].add(new Node(end, start, value)); // 방향성이 없으므로 양방향 모두 같은 value로 저장한다.
		}

		pq = new PriorityQueue<Node>();
		visited = new boolean[N];
		distance = 0;

		// 첫 정점은 0부터 시작
		for (int s = 0; s < list[0].size(); s++) {
			pq.offer(new Node(list[0].get(s).start, list[0].get(s).end, list[0].get(s).value)); // 0과 이어진 모든 정점의 데이터를
																								// PQ에 넣는다.
		}
		visited[0] = true; // 시작점은 방문 처리

		while (!pq.isEmpty()) {
			Node cur = pq.poll(); // value를 기준으로 오름차순 정렬해서 제일 낮은 값이 poll()된다.

			if (!visited[cur.end]) { // 방문한 적이 없을 경우
				visited[cur.end] = true; // 방문 처리 후
				distance += cur.value; // 거리를 더한다. 바로 거리를 더해도 되는 이유는 value로 오름차순 정렬을 했기 때문!
				for (int s = 0; s < list[cur.end].size(); s++) {
					pq.offer(new Node(cur.end, list[cur.end].get(s).end, list[cur.end].get(s).value)); // 이어진 모든 정점 데이터를
																										// PQ에 넣는다.
				}
			}

		}
		System.out.println(distance); // 최소 거리 출력

	} // end main

}
