import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static int V,E, distance;
	static boolean[] visited;
	static ArrayList<Node>[] list;
	static PriorityQueue<Node> pq;
	
	static class Node implements Comparable<Node>{
		int end;
		int value;
		
		public Node(int end, int value) {
			super();
			this.end = end;
			this.value = value;
		}
		
		@Override
		public String toString() {
			return "Node [end=" + end + ", value=" + value + "]";
		}
		
		@Override
		public int compareTo(Node o) {
			return this.value - o.value; // 정점에 상관없이 가중치로 오름차순
		}
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		V = Integer.parseInt(st.nextToken()); // 정점 개수
		E = Integer.parseInt(st.nextToken()); // 간선 개수
		
		list = new ArrayList[V];
		for(int i=0;i<V;i++) {
			list[i] = new ArrayList<Node>();
		}
		for(int i=0;i<E;i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken())-1;
			int end = Integer.parseInt(st.nextToken())-1;
			int value = Integer.parseInt(st.nextToken());
			list[start].add(new Node(end,value)); // 양방향 모두 같은 가중치 할당
			list[end].add(new Node(start,value));
		}
		
		pq = new PriorityQueue<Node>();
		distance = 0;
		visited = new boolean[V];
		
		for(int s=0;s<list[0].size();s++) { // 0번 정점부터 시작
			pq.offer(new Node(list[0].get(s).end,list[0].get(s).value));
		}
		visited[0] = true; // 0번 정점은 방문했다.
		
		while(!pq.isEmpty()) {
			Node cur = pq.poll();
			
			if(!visited[cur.end]) {
				visited[cur.end] = true;
				distance += cur.value;
				for(int s=0;s<list[cur.end].size();s++) {
					pq.offer(new Node(list[cur.end].get(s).end,list[cur.end].get(s).value));
				}
			}
		} // end while
		
		System.out.println(distance);
		
	} // end main
}
