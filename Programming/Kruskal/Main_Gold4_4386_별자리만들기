import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.StringTokenizer;

class Point {
	int num;
	double x;
	double y;

	public Point(int num, double x, double y) {
		super();
		this.num = num;
		this.x = x;
		this.y = y;
	}
}

class Edge implements Comparable<Edge> {
	int start;
	int end;
	double value;

	public Edge(int start, int end, double value) {
		super();
		this.start = start;
		this.end = end;
		this.value = value;
	}

	@Override
	public String toString() {
		return "Edge [start=" + start + ", end=" + end + ", value=" + value + "]";
	}

	@Override
	public int compareTo(Edge o) {
		if (value < o.value) {
			return -1;
		} else {
			return 1;
		}
	}

}

public class Main_Gold4_4386_별자리만들기 {
	static int N;
	static ArrayList<Edge> list;
	static int[] parents, rank;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		Point[] points = new Point[N];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			double x = Double.parseDouble(st.nextToken());
			double y = Double.parseDouble(st.nextToken());

			points[i] = new Point(i, x, y);
		}
		list = new ArrayList<>();

		for (int i = 0; i < N; i++) {
			for (int j = i + 1; j < N; j++) {
				double value = distance(points[i], points[j]);
				list.add(new Edge(points[i].num, points[j].num, value));
			}
		}
		Collections.sort(list);

		parents = new int[N];
		rank = new int[N];

		for (int i = 0; i < N; i++) {
			makeSet(i);
		}

		int cnt = 0;
		double result = 0;
		for (int i = 0; i < list.size(); i++) {
			int a = findSet(list.get(i).start);
			int b = findSet(list.get(i).end);

			if (a == b)
				continue;

			union(a, b);

			result += list.get(i).value;
			cnt++;
			if (cnt == N - 1) {
				break;
			}

		}
		System.out.println(result);

	}

	private static void union(int a, int b) {
		if (rank[a] > rank[b]) {
			parents[b] = a;
		} else {
			parents[a] = b;
			if (rank[a] == rank[b]) {
				rank[b]++;
			}
		}
	}

	private static int findSet(int x) {
		if (x == parents[x]) {
			return x;
		} else {
			parents[x] = findSet(parents[x]);
			return parents[x];
		}
	}

	private static void makeSet(int i) {
		parents[i] = i;
	}

	private static double distance(Point p1, Point p2) {
		return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
	}

}
