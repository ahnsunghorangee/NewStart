import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.StringTokenizer;

public class Main_Gold4_1197_최소스패닝트리 {
	static int V, E;
	static int[][] graph;
	static int[] parents, rank;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		V = Integer.parseInt(st.nextToken());
		E = Integer.parseInt(st.nextToken());
		graph = new int[E][3];
		for (int i = 0; i < E; i++) {
			st = new StringTokenizer(br.readLine());
			graph[i][0] = Integer.parseInt(st.nextToken()) - 1;
			graph[i][1] = Integer.parseInt(st.nextToken()) - 1;
			graph[i][2] = Integer.parseInt(st.nextToken());
		}
		Arrays.sort(graph, new Comparator<int[]>() {
			@Override
			public int compare(int[] o1, int[] o2) {
				return Integer.compare(o1[2], o2[2]);
			}
		});

		parents = new int[V];
		rank = new int[V];

		for (int i = 0; i < V; i++) {
			makeSet(i);
		}

		int cnt = 0;
		int result = 0;
		for (int i = 0; i < E; i++) {
			int a = findSet(graph[i][0]);
			int b = findSet(graph[i][1]);
			if (a == b)
				continue;

			union(a, b);

			result += graph[i][2];
			cnt++;
			if (cnt == V - 1) {
				break;
			}
		}
		System.out.println(result);

	}

	private static void union(int a, int b) {
		if (rank[a] > rank[b]) {
			parents[b] = a;
		} else {
			parents[a] = b;
			if (rank[a] == rank[b]) {
				rank[b]++;
			}
		}
	}

	private static int findSet(int i) {
		if (parents[i] == i) {
			return i;
		} else {
			parents[i] = findSet(parents[i]);
			return parents[i];
		}
	}

	private static void makeSet(int i) {
		parents[i] = i;
	}

}
