import java.util.Arrays;

// O(N^2)
public class L01_NxN {
	public static void main(String[] args) {
		int[] a = { 3, 2, 6, 4, 5, 1 }; // 예제
		int[] LIS = new int[a.length];
		int[] path = new int[a.length]; // 경로 역추적을 하기 위함.

		// O(N^2)
		for (int i = 0; i < LIS.length; i++) {
			LIS[i] = 1; // 초기값(1개짜리 수열)
			path[i] = -1; // 나의 앞의 수열 숫자의 index
			for (int j = 0; j < i; j++) { // 내 앞의 숫자중에 나보다 작은 숫자를 찾기
				if (a[j] < a[i] && LIS[i] < LIS[j] + 1) { // 핵심!!!
					LIS[i] = LIS[j] + 1;
					path[i] = j;
				}
			}
		}
		System.out.println("LIS[]: " + Arrays.toString(LIS));

		int maxLISIndex = 0; // 길이가 가장 긴 index를 찾는다.
		for (int i = 0; i < LIS.length; i++) {
			if (LIS[maxLISIndex] < LIS[i]) {
				maxLISIndex = i;
			}
		}
		System.out.println("최장 증가 수열의 길이: " + LIS[maxLISIndex]);
		System.out.println("path[]: " + Arrays.toString(path));

		String result = "";
		for (int i = maxLISIndex; i != -1; i = path[i]) { // index를 가지고 추적한다.
			result = a[i] + " " + result; // 기존의 값 앞 쪽에 붙이기
		}
		System.out.println("result: " + result);
	}
}
