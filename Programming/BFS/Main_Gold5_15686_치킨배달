import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main_Gold5_15686_치킨배달 {
	static int N, M, home;
	static int[][] map, distance;
	static boolean[][] visited;
	static int[] nums;
	static boolean[] isSelected;
	static List<int[]> list;
	static Queue<int[]> queue;
	static int Ans;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		// 입력
		N = Integer.parseInt(st.nextToken()); // 맵 NxN, 2 <= N <= 50 
		M = Integer.parseInt(st.nextToken()); // 치킨집 최대 M개 선택, 1 <= M <= 13
		list = new ArrayList<>(); // 치킨좌표 저장
		map = new int[N][N];
		home = 0; // 집 개수
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == 2) { // 2: 치킨집
					list.add(new int[] { i, j });
				} else if (map[i][j] == 1) { // 1: 집
					home++;
				}
			}
		}
		
		// nCr
		nums = new int[M];
		isSelected = new boolean[M];
		Ans = Integer.MAX_VALUE;
		nCr(0, 0);
		System.out.println(Ans-home);
	}

	// 조합으로 치킨집 뽑기
	static void nCr(int cnt, int cur) {
		if (cnt == M) { // 이번 케이스에서
			queue = new LinkedList<>();
			visited = new boolean[N][N];
			distance = new int[N][N];
			for (int i = 0; i < M; i++) {
				queue.offer(new int[] { list.get(nums[i])[0], list.get(nums[i])[1] }); // 치킨집 좌표 큐에 저장
				visited[list.get(nums[i])[0]][list.get(nums[i])[1]] = true; // 치킨집 방문 처리
				distance[list.get(nums[i])[0]][list.get(nums[i])[1]] = 1; // 거리 1로 시작
			}
			Ans = Math.min(Ans, bfs()); // bfs 후 최소값이면 업데이트
			return;
		}
		for (int i = cur; i < list.size(); i++) {
			nums[cnt] = i;
			nCr(cnt + 1, i + 1);
		}
	}

	static int[] dy = { 1, -1, 0, 0 };
	static int[] dx = { 0, 0, 1, -1 };

	static int bfs() {
		int cnt = 0; // 집 전체에 방문했는지를 체크하기 위함.
		int result = 0; // 치킨집에서 집까지 거리 저장하기 위함.
		while (!queue.isEmpty()) {
			int[] c = queue.poll();
			for (int d = 0; d < 4; d++) {
				int ny = c[0] + dy[d];
				int nx = c[1] + dx[d];
				if (!boundary(ny, nx)) {
					continue;
				}
				if (!visited[ny][nx]) {
					visited[ny][nx] = true;
					distance[ny][nx] += distance[c[0]][c[1]]+1;
					if (map[ny][nx] == 1) {
						result += distance[ny][nx];
						cnt++;
						queue.offer(new int[] {ny,nx});
					} else {
						queue.offer(new int[] { ny, nx });
					}
				}
			}
			if (cnt == home) // 집에 모두 방문하면 while문 종료
				break;
		}
		return result;
	}

	static boolean boundary(int cy, int cx) {
		return cy >= 0 && cy < N && cx >= 0 && cx < N;
	}
}
