package programmers_wintercoding;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Queue;

public class 지형이동solution {
	static class Point{
		int y,x;

		@Override
		public String toString() {
			return "Point [y=" + y + ", x=" + x + "]";
		}

		public Point(int y, int x) {
			super();
			this.y = y;
			this.x = x;
		}
		
	}
	
	static class Edge implements Comparable<Edge>{
		int start, dest, cost;

		@Override
		public String toString() {
			return "Edge [start=" + start + ", dest=" + dest + ", cost=" + cost + "]";
		}

		public Edge(int start, int dest, int cost) {
			super();
			this.start = start;
			this.dest = dest;
			this.cost = cost;
		}

		@Override
		public int compareTo(Edge o) {
			return this.cost - o.cost;
		}
		
	}
	
	// bfs를 위함
	static int[][] directions = {{1,0},{-1,0},{0,1},{0,-1}};
	static int[][] area;
	
	// unio-find를 위함
	static int[] parents;
	static int[] rank;
	static ArrayList<Edge> list;
	
	
	public static void main(String[] args) {
		int[][] land = { { 10,11,10,11 }, { 2,21,20,10 }, { 1,20,21,11 }, { 2,1,2,1 } };
		int height = 1;
		System.out.println(solution(land, height));
	}
	
	

	private static int solution(int[][] land, int height) {
		int answer = 0;
		
		int len = land.length;
		area = new int[len][len];
		for(int i=0;i<len;i++) {
			Arrays.fill(area[i], -1);
		}
		list = new ArrayList<>();
		
		int totalArea = -1;
		
		for(int i=0;i<len;i++) {
			for(int j=0;j<len;j++) {
				if(area[i][j] >= 0) {
					continue;
				}
				totalArea++;
				Queue<Point> queue = new LinkedList<>();
				queue.offer(new Point(i,j));
				area[i][j] = totalArea;
				
				while(!queue.isEmpty()) {
					Point cp = queue.poll();
					for(int d=0;d<4;d++) {
						int ny = cp.y + directions[d][0];
						int nx = cp.x + directions[d][1];
						if(ny<0 || ny >= len || nx<0 || nx>=len) {
							continue;
						}
						
						if(area[ny][nx] >= 0) { // 
							continue;
						}
						
						if(Math.abs(land[ny][nx] - land[cp.y][cp.x]) > height) {
							continue;
						}
						
						area[ny][nx] = totalArea;
						queue.offer(new Point(ny,nx));
					}
				}
				
			}
		}
		
		
		// union-find
		parents = new int[totalArea+1];
		rank = new int[totalArea+1];
		
		// 1. 부모 노드를 본인으로 초기화
		for(int i=0;i<totalArea+1;i++) {
			makeSet(i);
		}
		
		for(int i=0;i<len ; i++) {
			for(int j=0;j<len;j++) {
				for(int d=0;d<4;d++) {
					int ny = i + directions[d][0];
					int nx = j + directions[d][1];
					
					if(ny<0 || ny >= len || nx<0 || nx>=len) {
						continue;
					}
					
					if(area[i][j] == area[ny][nx]) { // 같은 구역이면
						continue;
					}
					
					// 다른 구역이면
					list.add(new Edge(area[i][j], area[ny][nx], Math.abs(land[i][j] - land[ny][nx])));
				}
			}
		}
		
		Collections.sort(list, new Comparator<Edge>() {

			@Override
			public int compare(Edge o1, Edge o2) {
				if(o1.cost < o2.cost) {
					return -1;
				} else if(o1.cost == o2.cost) {
					if(o1.start < o2.start) {
						return -1;
					} else {
						return 1;
					}
				} else {
					return 1;
				}
			}
			
		});
		
		int cnt = 0; // 공통 구역을 찾을 때마다 갯수를 늘려주기 위함
		for(Edge ce : list) {
			int start = findSet(ce.start);
			int dest = findSet(ce.dest);
			if(start != dest) {
				union(start, dest);
				answer += ce.cost;
				if(++cnt == totalArea) {
					break;
				}
			}
		}
		
		
		return answer;
	}
	private static void makeSet(int i) {
		parents[i] = i;
	}
	private static int findSet(int i) {
		if(parents[i] == i) {
			return i;
		} else {
			parents[i] = findSet(parents[i]);
			return parents[i];
		}
	}
	private static void union(int x, int y) {
		if(rank[x] > rank[y]) {
			parents[y] = x;
		} else {
			parents[x] = y;
			if(rank[y] == rank[x]) {
				rank[y]++;
			}
		}
	}
}
