import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Solution_Test_1949_등산로조성 {
	static int T, N, K, max;
	static int[][] map;
	static boolean[][] visited;
	static int[] dy = { 1, -1, 0, 0 };
	static int[] dx = { 0, 0, 1, -1 };

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		T = Integer.parseInt(br.readLine()); // 테스트 케이스

		for (int t = 1; t <= T; t++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken()); // map NxN, 3 <= N <= 8
			K = Integer.parseInt(st.nextToken()); // 최대 공사 가능 높이, 1 <= K <= 5

			map = new int[N][N];
			visited = new boolean[N][N];
			int high = 0;
			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
					high = Math.max(high, map[i][j]); // 제일 큰 봉우리 최대 5개
				}
			}

			max = -1;
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (map[i][j] == high) // 최고 봉우리에서 시작
						dfs(i, j, 1, false);
				}
			}

			sb.append("#" + t + " " + max + "\n");
		} // T

		System.out.println(sb.toString());
	} // main

	static void dfs(int i, int j, int cnt, boolean use) { // 좌표y, 좌표x, 등선로 길이, 공사유무
		max = Math.max(max, cnt); // 가장 긴 등산로 갱신
		visited[i][j] = true; // 해당 등산로 방문처리

		for (int d = 0; d < 4; d++) {
			int ny = i + dy[d];
			int nx = j + dx[d];
			if (0 <= ny && ny < N && 0 <= nx && nx < N && !visited[ny][nx]) { // 방문 체크하고
				if (map[ny][nx] < map[i][j]) { // 다음 봉우리가 현재 봉우리보다 작으면
					dfs(ny, nx, cnt + 1, use); // DFS 시작
				} else { // 다음봉우리가 현재봉우리보다 크거나 같으면 공사를 할 수 있다.
					if (!use) { // 공사를 한 적이 없으면
						for (int k = 1; k <= K; k++) { // 1부터 K만큼 순차적으로 깎는다. (최대한 조금 깎기 위함.)
							if (map[ny][nx] - k < map[i][j]) {
								map[ny][nx] -= k; // 깎고나서
								dfs(ny, nx, cnt + 1, true); // DFS 시작
								map[ny][nx] += k; // DFS 끝나면 다시 원상복구
							}
						}
					}
				}
			}
		}
		visited[i][j] = false; // 메인 2중 for문에서 계속 체크해야되서 visited배열 초기화하기 위해 방문처리 해제
	}

}
