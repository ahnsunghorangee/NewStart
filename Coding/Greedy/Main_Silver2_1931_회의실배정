import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class Main {
	static int N;
	static ArrayList<Node> room;

	static class Node implements Comparable<Node> {
		int startTime;
		int endTime;

		public Node(int startTime, int endTime) {
			super();
			this.startTime = startTime;
			this.endTime = endTime;
		}

		@Override
		public String toString() {
			return "Node [startTime=" + startTime + ", endTime=" + endTime + "]";
		}

		@Override
		public int compareTo(Node o) { // 오름차순 정렬
			if (this.endTime - o.endTime < 0) {
				return this.endTime - o.endTime; // 음수면 그대로
			} else if (this.endTime - o.endTime == 0) { // 같으면
				return this.startTime - o.startTime; // 시작시간으로 정렬
			} else
				return 1; // 양수면 바꾸기
		}
	}

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;

		// 입력
		N = Integer.parseInt(br.readLine());
		room = new ArrayList<>();
		for (int n = 0; n < N; n++) {
			st = new StringTokenizer(br.readLine());
			room.add(new Node(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken())));
		}

		Collections.sort(room); // 정렬!!!

		int standard = room.get(0).endTime; // 제일 위에 있는 값이 제일 빨리 시작하는 값
		int Ans = 1; // 첫번째 값이 회의실 사용 중
		for (int n = 1; n < N; n++) {
			if (standard <= room.get(n).startTime) { // 기준값이 다음 회의 시작시간과 같거나 같을 때,
				Ans++;
				standard = room.get(n).endTime; // 기준값을 바꾸어준다.
			}
		}
		System.out.println(Ans);
	} // end main
}
