import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main_Gold3_4179_불 {

	static int R, C, time;
	static char[][] map;
	static Queue<int[]> jihun, fire;
	static int[][] dir = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
	static boolean[][] visited;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());

		map = new char[R][C];
		visited = new boolean[R][C];
		jihun = new LinkedList<>();
		fire = new LinkedList<>();
		
		for (int i = 0; i < R; i++) {
			String str = br.readLine();
			for (int j = 0; j < C; j++) {
				map[i][j] = str.charAt(j);
				if (map[i][j] == 'J') {
					jihun.offer(new int[] { i, j });
					if (i == 0 || i == R - 1 || j == 0 || j == C - 1) {
						System.out.println(1);
						return; // 메인이 종료
					}
				}
				if (map[i][j] == 'F') {
					fire.offer(new int[] { i, j });
					visited[i][j] = true;
				}
				
			}
		}

		
		
		time = 1;
		boolean fail = false;
		while(true) {
			time++;
			fireBFS();
			if(jihunBFS()) {
				break;
			}
			if(jihun.isEmpty()) {
				fail = true;
				break;
			}
		}
		
		System.out.println(fail ? "IMPOSSIBLE" : time);
	}
	
	private static void print() {
		for (int i = 0; i < R; i++) {
			for (int j = 0; j < C; j++) {
				System.out.print(map[i][j] + " ");
			}
			System.out.println();
		}
	}

	private static boolean jihunBFS() {
		int queSize = jihun.size();
		while (queSize > 0) {
			int cur[] = jihun.poll();
			for (int d = 0; d < 4; d++) {
				int ny = dir[d][0] + cur[0];
				int nx = dir[d][1] + cur[1];
				
				
				if(map[ny][nx] == '#' || map[ny][nx] == 'F') {
					continue;
				}
				
				if (edge(ny, nx)) {
					return true;
				}
				
				if(!visited[ny][nx] && map[ny][nx] == '.') {
					jihun.offer(new int[] {ny,nx});
					visited[ny][nx] = true;
					map[ny][nx] = 'J';
				}
			}
			queSize--;
		}
		return false;
	}

	private static boolean edge(int ny, int nx) {
		return ny == 0 || ny == R-1 || nx == 0 || nx == C-1;
	}
	
	private static void fireBFS() {
		int queSize = fire.size();
		while (queSize > 0) {
			int cur[] = fire.poll();
			for (int d = 0; d < 4; d++) {
				int ny = dir[d][0] + cur[0];
				int nx = dir[d][1] + cur[1];
				
				if (!boundary(ny, nx)) {
					continue;
				}
				
				if(map[ny][nx] == '#') {
					continue;
				}
				
				if(!visited[ny][nx] && (map[ny][nx] == '.' || map[ny][nx] == 'J')) {
					fire.offer(new int[] {ny,nx});
					visited[ny][nx] = true;
					map[ny][nx] = 'F';
				}
			}
			queSize--;
		}
	}
	
	private static boolean boundary(int ny,int nx) {
		return ny>=0 && ny<R && nx>=0 && nx<C;
	}

}
