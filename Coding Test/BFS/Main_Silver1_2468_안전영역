import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main_Silver1_2468_안전영역 {
	static int N, max, cnt;;
	static int[][] map;
	static int[][] dirs = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
	static boolean[][] visited;

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine()); // 2 <= N <= 100

		map = new int[N][N];
		max = 0;
		StringTokenizer st = null;
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				max = max < map[i][j] ? map[i][j] : max;
			}
		}
		cnt = 1; // 맨 처음에는 크게 섬 하나이다.
		for (int i = 1; i <= max; i++) { // 최대 높이까지 비내리기
			int count = 0; // 섬의 개수 세기 위함
			visited = new boolean[N][N]; // 방문처리하기 위해 매번 초기화
			for (int h = 0; h < N; h++) {
				for (int w = 0; w < N; w++) {
					if (map[h][w] == i) {
						map[h][w] = 0; // 비에 잠기면 0으로 바꾸고
						visited[h][w] = true; // 방문처리
					}
				}
			}
			for (int h = 0; h < N; h++) {
				for (int w = 0; w < N; w++) {
					if (map[h][w] != 0 && !visited[h][w]) { // 비에 잠기지 않았으면
						bfs(h, w, i); // 섬으로 엮는다.
						count++;
					}
				}
			}

			cnt = cnt < count ? count : cnt; // 가장 큰 값으로 바꿔준다.

		}
		System.out.println(cnt);
	}

	private static void bfs(int h, int w, int rain) {
		Queue<int[]> que = new LinkedList<int[]>();
		que.offer(new int[] { h, w });
		while (!que.isEmpty()) {
			int[] current = que.poll();
			int cy = current[0];
			int cx = current[1];

			for (int d = 0; d < 4; d++) {
				int ny = cy + dirs[d][0];
				int nx = cx + dirs[d][1];

				if (!boundary(ny, nx)) {
					continue;
				}

				if (map[ny][nx] > rain && !visited[ny][nx]) { // 비에 잠기지 않고 방문한 적이 없으면
					visited[ny][nx] = true; // 방문처리 후
					que.offer(new int[] { ny, nx }); // 큐에 삽입
				}

			}
		}
	}

	private static boolean boundary(int ny, int nx) {
		return ny >= 0 && ny < N && nx >= 0 && nx < N;
	}

}
