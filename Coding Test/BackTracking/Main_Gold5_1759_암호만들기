import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;

/*
 * 최적화 문제와 결정 문제를 푸는 방법
 * 
 * 백트래킹(가지치기): 해를 찾는 도중 해가 아니어서 막히면, 되돌아가서 다시 해를 찾아가는 기법
 * == 모든 조합의 수를 살펴보는 것인데 단 조건이 만족할 때만.
 * == 조합 알고리즘 문제에 대해 모든 가능한 해를 나열하는 것.
 * 
 * 해가 될 만한지 판단한 후 유망하지 않다고 결정되면 그 노드의 이전(부모)로 돌아가(bakctracking) 다음 자식 노드로 간다.
 * 	promising: 해가 될 가능성이 있으면 유망하다.
 * 	pruning: 유망하지 않은 노드에 가지 않는 것을 가지치기
 * 
 */
public class Main_Gold5_1759_암호만들기 {
	static char[] arr;
    static int[] result;
    static int L; // 만들어야 하는 암호 길이
    static int C; // 입력 받는 단어 개수
    
	public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] str = br.readLine().split(" ");
        L = Integer.parseInt(str[0]);
        C = Integer.parseInt(str[1]);
        arr = new char[C];
        result = new int[C];
        str = br.readLine().split(" ");
        for (int i = 0; i < C; i++) {
            arr[i] = str[i].charAt(0);
        }
 
        Arrays.sort(arr); // 문제를 보면 정렬되어 있어야한다....
        System.out.println(Arrays.toString(arr));
        DFS(0, 0, 0, 0);
    }
 
    // 시작점, 선택된 문자갯수, 자음갯수, 모음갯수
    public static void DFS(int start, int depth, int ja, int mo) {
 
        for (int i = start; i < C; i++) {
            result[i] = 1; // 선택된 문자 확인용
            // 자음과 모음 갯수를 파악해서 다음으로 넘겨준다.
            DFS(i + 1, depth + 1, ja + (!check(arr[i]) ? 1 : 0), mo + (!check(arr[i]) ? 0 : 1));
 
            result[i] = 0; // 0이면 선택 안됨
        }
        // 문자갯수가 N개이며 자음과 모음의 갯수가 규칙에 맞을때만 출력한다.
        if (depth == L && ja >= 2 && mo >= 1) {
            print();
        }
    }
 
    public static void print() {
        for (int i = 0; i < C; i++) {
            // result가 0이라면 선택되지 않았기 때문에 넘긴다.
            if (result[i] == 1)
                System.out.print(arr[i]);
        }
        System.out.println();
    }
 
    // 자음 모음 파악 함수
    public static boolean check(char a) {
        if (a == 'a' || a == 'e' || a == 'i' || a == 'o' || a == 'u')
            return true;
        else
            return false;
    }

}


