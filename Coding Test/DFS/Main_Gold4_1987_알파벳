package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.StringTokenizer;

public class Main_Gold4_1987_알파벳 {
	static int R, C, answer;
	static char[][] map;

	static int[][] directions = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());

		map = new char[R][C];

		for (int i = 0; i < R; i++) {
			String data = br.readLine();
			map[i] = data.toCharArray();
		}
		boolean[][] visited = new boolean[R][C];
		Set<Character> set = new HashSet<>();
		visited[0][0] = true; // (0,0)부터 시작
		set.add(map[0][0]); // (0,0)부터 시작
		
		answer = Integer.MIN_VALUE;
		
		dfs(0, 0, visited, set);

		if(answer == Integer.MIN_VALUE) { // 한 개일 때는 한 번 처리해줘야한다.
			answer = 1;
		}
		System.out.println(answer);
	}

	private static void dfs(int cy, int cx, boolean[][] visited, Set<Character> set) {
		// 중간 출력
		Iterator<Character> it = set.iterator();
		while(it.hasNext()) {
			System.out.print(it.next()+" ");
		}
		System.out.println();
		for(int i=0;i<R;i++) {
			for(int j=0 ; j<C;j++) {
				System.out.print(visited[i][j]+" ");
			}
			System.out.println();
		}
		System.out.println("-------------");
		for (int d = 0; d < 4; d++) {
			int ny = cy + directions[d][0];
			int nx = cx + directions[d][1];

			if (!boundary(ny, nx)) {
				continue;
			}
			
			if(!visited[ny][nx] && !set.contains(map[ny][nx])) { // 재귀
				visited[ny][nx] = true;
				set.add(map[ny][nx]);
				dfs(ny,nx,visited,set);
				visited[ny][nx] = false; // 재귀 끝나면 다시 원래 상태로 복구
				set.remove(map[ny][nx]);
			}
			answer = answer < set.size() ? set.size() : answer;
		}
	}

	private static boolean boundary(int ny, int nx) {
		return ny >= 0 && ny < R && nx >= 0 && nx < C;
	}
}
