package programmers_wintercoding;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;

public class 배달 {
	static class Edge implements Comparable<Edge> {
		int to;
		int weight;

		public Edge(int to, int weight) {
			super();
			this.to = to;
			this.weight = weight;
		}

		@Override
		public int compareTo(Edge o) {
			return Integer.compare(this.weight, o.weight);
		}

		@Override
		public String toString() {
			return "Edge [to=" + to + ", weight=" + weight + "]";
		}

	}

	public static void main(String[] args) {
		int N = 5;
		int[][] road = { { 1, 2, 1 }, { 2, 3, 3 }, { 5, 2, 2 }, { 1, 4, 2 }, { 5, 3, 1 }, { 5, 4, 2 } };
		int K = 3;
		System.out.println(solution(N, road, K));
	}

	private static int solution(int N, int[][] road, int K) {
		int answer = 0;

		List<Edge>[] adj = new ArrayList[N];
		for (int i = 0; i < N; i++) {
			adj[i] = new ArrayList<>();
		}

		for (int len = 0; len < road.length; len++) {
			int x = road[len][0] - 1; // from
			int y = road[len][1] - 1; // to
			int value = road[len][2]; // weight

			adj[x].add(new Edge(y, value));
			adj[y].add(new Edge(x, value));
		}

		// Dijkstra
		PriorityQueue<Edge> pq = new PriorityQueue<>();
		boolean check[] = new boolean[N]; // 방문 체크
		Edge[] dist = new Edge[N]; // 최소 거리

		for (int i = 0; i < N; i++) {
			if (i == 0) {
				dist[i] = new Edge(i, 0);
			} else {
				dist[i] = new Edge(i, Integer.MAX_VALUE);
			}
			pq.add(dist[i]);
		}

		while (!pq.isEmpty()) {
			Edge edge = pq.poll();
			for (Edge next : adj[edge.to]) {
				if (!check[next.to] && dist[next.to].weight > dist[edge.to].weight + next.weight) {

					dist[next.to].weight = dist[edge.to].weight + next.weight;

					pq.remove(dist[next.to]);
					pq.add(dist[next.to]);
				}
			}
			check[edge.to] = true;
		}
		
		for(int i=0 ; i<N;i++) {
			if(dist[i].weight <= K) {
				answer++;
			}
		}


		return answer;
	}

}
